// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wxch

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WxchMetaData contains all meta data concerning the Wxch contract.
var WxchMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"}],\"name\":\"BrokerDepositAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"inputRequestHash\",\"type\":\"bytes32\"}],\"name\":\"BurnConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"}],\"name\":\"CustodianDepositAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintRequestAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintRequestCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"}],\"name\":\"addMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"brokerDepositAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"burnRequestNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"cancelMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"confirmBurnRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"confirmMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contractControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"custodianDepositAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getBurnRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getMintRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mintRequestNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"rejectMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"}],\"name\":\"setBrokerDepositAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"}],\"name\":\"setCustodianDepositAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200302d3803806200302d8339810160408190526200003491620001fa565b600080546001600160a01b031916339081178255604051909182916000805160206200300d833981519152908290a3506001600160a01b038116620000c05760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f636f6e74726f6c6c65722061646472657373000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b038316179055620000e681620000ed565b506200022a565b6000546001600160a01b03163314620001495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000b7565b6001600160a01b038116620001b05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000b7565b600080546040516001600160a01b03808516939216916000805160206200300d83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156200020c578081fd5b81516001600160a01b038116811462000223578182fd5b9392505050565b612dd3806200023a6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063c06e2d241161007c578063c06e2d24146102ce578063c632e4bc146102e1578063c72551be146102f4578063e21c40c014610314578063f2fde38b14610327578063f77c47911461033a57610142565b80638da5cb5b1461023c5780638e24a764146102615780639355f0a4146102745780639ad4b86b14610287578063b69b22d8146102a757610142565b80635c9adea71161010a5780635c9adea7146101de5780636406c10c146101f1578063715018a61461020457806372f69a721461020e57806373e6b0b814610216578063861f92a81461022957610142565b806314990ace146101475780632bf90baa14610170578063311104f314610193578063424e6575146101a557806342966c68146101cb575b600080fd5b61015a6101553660046128cb565b61034d565b6040516101679190612b73565b60405180910390f35b61018361017e36600461295c565b6103e7565b6040519015158152602001610167565b6006545b604051908152602001610167565b6101b86101b336600461295c565b61063b565b6040516101679796959493929190612afb565b6101836101d936600461295c565b6107a9565b61015a6101ec3660046128cb565b610d2b565b6101b86101ff36600461295c565b610d44565b61020c610d54565b005b600754610197565b6101836102243660046128ee565b610df8565b61018361023736600461295c565b611058565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610167565b61018361026f3660046129fa565b6111c8565b610183610282366004612974565b611536565b61019761029536600461295c565b60046020526000908152604090205481565b6102ba6102b536600461295c565b611914565b604051610167989796959493929190612c22565b6101836102dc36600461295c565b611b75565b6101836102ef3660046129bf565b611d3b565b61019761030236600461295c565b60056020526000908152604090205481565b6102ba61032236600461295c565b611e63565b61020c6103353660046128cb565b612041565b600154610249906001600160a01b031681565b6002602052600090815260409020805461036690612d34565b80601f016020809104026020016040519081016040528092919081815260200182805461039290612d34565b80156103df5780601f106103b4576101008083540402835291602001916103df565b820191906000526020600020905b8154815290600101906020018083116103c257829003601f168201915b505050505081565b600154604051630d72032360e21b81523360048201526000916001600160a01b0316906335c80c8c9060240160206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610463919061293c565b6104885760405162461bcd60e51b815260040161047f90612beb565b60405180910390fd5b6000610492612747565b61049b8461215b565b80925081935050506002600683815481106104c657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600660079092020101805460ff1916600183600381111561050157634e487b7160e01b600052602160045260246000fd5b0217905550600154815160208301516040516340c10f1960e01b81526001600160a01b03928316600482015260248101919091529116906340c10f1990604401602060405180830381600087803b15801561055b57600080fd5b505af115801561056f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610593919061293c565b6105cd5760405162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b604482015260640161047f565b80600001516001600160a01b031681608001517f051f4ba27061b0e6dc829669a7baa8bba9cf7f6cd2f95e1f0bdd9c22126d8b218360200151846040015185606001518660a001518a604051610627959493929190612c98565b60405180910390a36001925050505b919050565b6006818154811061064b57600080fd5b60009182526020909120600790910201805460018201546002830180546001600160a01b03909316945090929161068190612d34565b80601f01602080910402602001604051908101604052809291908181526020018280546106ad90612d34565b80156106fa5780601f106106cf576101008083540402835291602001916106fa565b820191906000526020600020905b8154815290600101906020018083116106dd57829003601f168201915b50505050509080600301805461070f90612d34565b80601f016020809104026020016040519081016040528092919081815260200182805461073b90612d34565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b50505050600483015460058401546006909401549293909290915060ff1687565b6001546040516322b31d9f60e01b81523360048201526000916001600160a01b0316906322b31d9f9060240160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610825919061293c565b6108415760405162461bcd60e51b815260040161047f90612bbd565b336000908152600360205260408120805461085b90612d34565b80601f016020809104026020016040519081016040528092919081815260200182805461088790612d34565b80156108d45780601f106108a9576101008083540402835291602001916108d4565b820191906000526020600020905b8154815290600101906020018083116108b757829003601f168201915b505050505090506108e4816123c4565b156109425760405162461bcd60e51b815260206004820152602860248201527f62726f6b6572206173736574206465706f736974206164647265737320776173604482015267081b9bdd081cd95d60c21b606482015260840161047f565b60075460408051602080820183526000808352835160e08101855233815291820188905292810185905260608101829052608081018490524260a0820181905260c0820184905292610993826123e5565b60008181526005602090815260408083208990556007805460018101825593819052865193027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688810180546001600160a01b039095166001600160a01b0319909516949094178455868301517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6898201559086015180519495508694610a61937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a9093019291909101906127ab565b5060608201518051610a7d9160038401916020909101906127ab565b506080820151600482015560a0820151600582015560c082015160068201805460ff19166001836003811115610ac357634e487b7160e01b600052602160045260246000fd5b021790555050600154604080516321df0da760e01b815290516001600160a01b0390921692506321df0da7916004808301926020929190829003018186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4691906129a3565b6001546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018b90529116906323b872dd90606401602060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd1919061293c565b610c1d5760405162461bcd60e51b815260206004820152601e60248201527f7472616e7366657220746f6b656e7320746f206275726e206661696c65640000604482015260640161047f565b600154604051630852cd8d60e31b8152600481018a90526001600160a01b03909116906342966c6890602401602060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b919061293c565b610cd55760405162461bcd60e51b815260206004820152600b60248201526a189d5c9b8819985a5b195960aa1b604482015260640161047f565b336001600160a01b0316857f865e64c3fa22a0daee479fc02875d3e97d581930b9679232344d4d5dcce6a7b28a898886604051610d159493929190612cd8565b60405180910390a3506001979650505050505050565b6003602052600090815260409020805461036690612d34565b6007818154811061064b57600080fd5b6000546001600160a01b03163314610dae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161047f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600154604051630d72032360e21b81523360048201526000916001600160a01b0316906335c80c8c9060240160206040518083038186803b158015610e3c57600080fd5b505afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e74919061293c565b610e905760405162461bcd60e51b815260040161047f90612beb565b6001600160a01b038316610edf5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642062726f6b6572206164647265737360501b604482015260640161047f565b6001546040516322b31d9f60e01b81526001600160a01b038581166004830152909116906322b31d9f9060240160206040518083038186803b158015610f2457600080fd5b505afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5c919061293c565b610fb45760405162461bcd60e51b8152602060048201526024808201527f62726f6b65722061646472657373206973206e6f742061207265616c2062726f60448201526335b2b91760e11b606482015260840161047f565b610fbd826123c4565b15610fda5760405162461bcd60e51b815260040161047f90612b86565b6001600160a01b03831660009081526002602090815260409091208351611003928501906127ab565b50336001600160a01b0316836001600160a01b03167f889518f7687592efeb6e775822956ccb4e2a41cfb5bab0438d634523ccf6336d846040516110479190612b73565b60405180910390a350600192915050565b600154604051630d72032360e21b81523360048201526000916001600160a01b0316906335c80c8c9060240160206040518083038186803b15801561109c57600080fd5b505afa1580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d4919061293c565b6110f05760405162461bcd60e51b815260040161047f90612beb565b60006110fa612747565b6111038461215b565b809250819350505060036006838154811061112e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600660079092020101805460ff1916600183600381111561116957634e487b7160e01b600052602160045260246000fd5b021790555080600001516001600160a01b031681608001517fdadc06f5b98131083e96b856c044184efd23ae2e797a876fd80aa5dae4f724558360200151846040015185606001518660a001518a604051610627959493929190612c98565b6001546040516322b31d9f60e01b81523360048201526000916001600160a01b0316906322b31d9f9060240160206040518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611244919061293c565b6112605760405162461bcd60e51b815260040161047f90612bbd565b611269826123c4565b156112865760405162461bcd60e51b815260040161047f90612b86565b33600090815260026020526040902080546113299184916112a690612d34565b80601f01602080910402602001604051908101604052809291908181526020018280546112d290612d34565b801561131f5780601f106112f45761010080835404028352916020019161131f565b820191906000526020600020905b81548152906001019060200180831161130257829003601f168201915b5050505050612432565b6113755760405162461bcd60e51b815260206004820152601b60248201527f77726f6e67206173736574206465706f73697420616464726573730000000000604482015260640161047f565b6006546040805160e0810182523381526020810187905290810184905260608101859052608081018290524260a08201819052600060c083018190529091906113bd826123e5565b600081815260046020908152604080832088905560068054600181018255935285517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600790940293840180546001600160a01b0319166001600160a01b03909216919091178155868301517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408501559086015180519495508694919361148b937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41909101929101906127ab565b50606082015180516114a79160038401916020909101906127ab565b506080820151600482015560a0820151600582015560c082015160068201805460ff191660018360038111156114ed57634e487b7160e01b600052602160045260246000fd5b02179055505050336001600160a01b0316847f09e00024b3e14e42d4e78c05bf370a34c2e4ce4027dad38abafdb1bf49da432f8a898b8887604051610d15959493929190612c98565b600154604051630d72032360e21b81523360048201526000916001600160a01b0316906335c80c8c9060240160206040518083038186803b15801561157a57600080fd5b505afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b2919061293c565b6115ce5760405162461bcd60e51b815260040161047f90612beb565b60006115d8612747565b6115e18561248b565b8092508193505050836007838154811061160b57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600301908051906020019061162f9291906127ab565b5060026007838154811061165357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600660079092020101805460ff1916600183600381111561168e57634e487b7160e01b600052602160045260246000fd5b02179055508160056000611899600786815481106116bc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201805461171e90612d34565b80601f016020809104026020016040519081016040528092919081815260200182805461174a90612d34565b80156117975780601f1061176c57610100808354040283529160200191611797565b820191906000526020600020905b81548152906001019060200180831161177a57829003601f168201915b505050505081526020016003820180546117b090612d34565b80601f01602080910402602001604051908101604052809291908181526020018280546117dc90612d34565b80156118295780601f106117fe57610100808354040283529160200191611829565b820191906000526020600020905b81548152906001019060200180831161180c57829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff16600381111561187257634e487b7160e01b600052602160045260246000fd5b600381111561189157634e487b7160e01b600052602160045260246000fd5b9052506123e5565b81526020019081526020016000208190555080600001516001600160a01b031681608001517f1949e77206780c38f7c6487c926f8a51280fcdbf63397a01a3428dbfccd2b09f83602001518460400151888660a001518b604051611901959493929190612c98565b60405180910390a3506001949350505050565b60008060006060806000606060008060068a8154811061194457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820180546119a690612d34565b80601f01602080910402602001604051908101604052809291908181526020018280546119d290612d34565b8015611a1f5780601f106119f457610100808354040283529160200191611a1f565b820191906000526020600020905b815481529060010190602001808311611a0257829003601f168201915b50505050508152602001600382018054611a3890612d34565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6490612d34565b8015611ab15780601f10611a8657610100808354040283529160200191611ab1565b820191906000526020600020905b815481529060010190602001808311611a9457829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff166003811115611afa57634e487b7160e01b600052602160045260246000fd5b6003811115611b1957634e487b7160e01b600052602160045260246000fd5b8152505090506000611b2e8260c0015161250b565b905081608001519950816000015198508160200151975081604001519650816060015195508160a001519450809350611b66826123e5565b92505050919395975091939597565b6001546040516322b31d9f60e01b81523360048201526000916001600160a01b0316906322b31d9f9060240160206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf1919061293c565b611c0d5760405162461bcd60e51b815260040161047f90612bbd565b6000611c17612747565b611c208461215b565b805191935091506001600160a01b03163314611ca45760405162461bcd60e51b815260206004820152603960248201527f63616e63656c2073656e64657220697320646966666572656e74207468616e2060448201527f70656e64696e67207265717565737420696e69746961746f7200000000000000606482015260840161047f565b600160068381548110611cc757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600660079092020101805460ff19166001836003811115611d0257634e487b7160e01b600052602160045260246000fd5b0217905550604051848152339083907fb419f275eebfa354bbab2709955ee0c0e25ca95fae50a8e3672c5e3d9c931f5890602001610627565b6001546040516322b31d9f60e01b81523360048201526000916001600160a01b0316906322b31d9f9060240160206040518083038186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db7919061293c565b611dd35760405162461bcd60e51b815260040161047f90612bbd565b611ddc826123c4565b15611df95760405162461bcd60e51b815260040161047f90612b86565b3360009081526003602090815260409091208351611e19928501906127ab565b50336001600160a01b03167fd4bf22af0d62666e8b980f7e5a35e41f5b3fe0fe17917ec781288c9da27ca21f83604051611e539190612b73565b60405180910390a2506001919050565b60008060006060806000606060008060078a81548110611e9357634e487b7160e01b600052603260045260246000fd5b600091825260208220600660079092020190810154909250611eb79060ff1661250b565b600483015483546001850154600286018054939e506001600160a01b039092169c509a50919250611ee790612d34565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1390612d34565b8015611f605780601f10611f3557610100808354040283529160200191611f60565b820191906000526020600020905b815481529060010190602001808311611f4357829003601f168201915b50505050509650816003018054611f7690612d34565b80601f0160208091040260200160405190810160405280929190818152602001828054611fa290612d34565b8015611fef5780601f10611fc457610100808354040283529160200191611fef565b820191906000526020600020905b815481529060010190602001808311611fd257829003601f168201915b50505060058501546040805160e08101825287546001600160a01b0316815260018801546020820152600288018054969c50929a509598508895611b6695909450879350908401919061171e90612d34565b6000546001600160a01b0316331461209b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161047f565b6001600160a01b0381166121005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161047f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000612165612747565b826121a65760405162461bcd60e51b81526020600482015260116024820152700726571756573742068617368206973203607c1b604482015260640161047f565b6000838152600460205260409020546006805491935090839081106121db57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201805461223d90612d34565b80601f016020809104026020016040519081016040528092919081815260200182805461226990612d34565b80156122b65780601f1061228b576101008083540402835291602001916122b6565b820191906000526020600020905b81548152906001019060200180831161229957829003601f168201915b505050505081526020016003820180546122cf90612d34565b80601f01602080910402602001604051908101604052809291908181526020018280546122fb90612d34565b80156123485780601f1061231d57610100808354040283529160200191612348565b820191906000526020600020905b81548152906001019060200180831161232b57829003601f168201915b50505091835250506004820154602082015260058201546040820152600682015460609091019060ff16600381111561239157634e487b7160e01b600052602160045260246000fd5b60038111156123b057634e487b7160e01b600052602160045260246000fd5b90525090506123bf8184612664565b915091565b60006123df8260405180602001604052806000815250612432565b92915050565b80516020808301516040808501516060860151608087015160a08801519351600097612415979096959101612aac565b604051602081830303815290604052805190602001209050919050565b6000816040516020016124459190612a90565b604051602081830303815290604052805190602001208360405160200161246c9190612a90565b6040516020818303038152906040528051906020012014905092915050565b6000612495612747565b826124d65760405162461bcd60e51b81526020600482015260116024820152700726571756573742068617368206973203607c1b604482015260640161047f565b6000838152600560205260409020546007805491935090839081106121db57634e487b7160e01b600052603260045260246000fd5b6060600082600381111561252f57634e487b7160e01b600052602160045260246000fd5b1415612559575060408051808201909152600781526670656e64696e6760c81b6020820152610636565b600182600381111561257b57634e487b7160e01b600052602160045260246000fd5b14156125a6575060408051808201909152600881526718d85b98d95b195960c21b6020820152610636565b60028260038111156125c857634e487b7160e01b600052602160045260246000fd5b14156125f35750604080518082019091526008815267185c1c1c9bdd995960c21b6020820152610636565b600382600381111561261557634e487b7160e01b600052602160045260246000fd5b141561264057506040805180820190915260088152671c995a9958dd195960c21b6020820152610636565b506040805180820190915260078152663ab735b737bbb760c91b6020820152610636565b60008260c00151600381111561268a57634e487b7160e01b600052602160045260246000fd5b146126d05760405162461bcd60e51b815260206004820152601660248201527572657175657374206973206e6f742070656e64696e6760501b604482015260640161047f565b6126d9826123e5565b81146127435760405162461bcd60e51b815260206004820152603360248201527f676976656e2072657175657374206861736820646f6573206e6f74206d6174636044820152721a0818481c195b991a5b99c81c995c5d595cdd606a1b606482015260840161047f565b5050565b6040518060e0016040528060006001600160a01b031681526020016000815260200160608152602001606081526020016000815260200160008152602001600060038111156127a657634e487b7160e01b600052602160045260246000fd5b905290565b8280546127b790612d34565b90600052602060002090601f0160209004810192826127d9576000855561281f565b82601f106127f257805160ff191683800117855561281f565b8280016001018555821561281f579182015b8281111561281f578251825591602001919060010190612804565b5061282b92915061282f565b5090565b5b8082111561282b5760008155600101612830565b600082601f830112612854578081fd5b813567ffffffffffffffff8082111561286f5761286f612d6f565b604051601f8301601f19908116603f0116810190828211818310171561289757612897612d6f565b816040528381528660208588010111156128af578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156128dc578081fd5b81356128e781612d85565b9392505050565b60008060408385031215612900578081fd5b823561290b81612d85565b9150602083013567ffffffffffffffff811115612926578182fd5b61293285828601612844565b9150509250929050565b60006020828403121561294d578081fd5b815180151581146128e7578182fd5b60006020828403121561296d578081fd5b5035919050565b60008060408385031215612986578182fd5b82359150602083013567ffffffffffffffff811115612926578182fd5b6000602082840312156129b4578081fd5b81516128e781612d85565b6000602082840312156129d0578081fd5b813567ffffffffffffffff8111156129e6578182fd5b6129f284828501612844565b949350505050565b600080600060608486031215612a0e578081fd5b83359250602084013567ffffffffffffffff80821115612a2c578283fd5b612a3887838801612844565b93506040860135915080821115612a4d578283fd5b50612a5a86828701612844565b9150509250925092565b60008151808452612a7c816020860160208601612d04565b601f01601f19169290920160200192915050565b60008251612aa2818460208701612d04565b9190910192915050565b600060018060a01b038816825286602083015260c06040830152612ad360c0830187612a64565b8281036060840152612ae58187612a64565b6080840195909552505060a00152949350505050565b600060018060a01b038916825287602083015260e06040830152612b2260e0830188612a64565b8281036060840152612b348188612a64565b9150508460808301528360a083015260048310612b6157634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b6000602082526128e76020830184612a64565b6020808252601d908201527f696e76616c6964206173736574206465706f7369742061646472657373000000604082015260600190565b60208082526014908201527339b2b73232b9103737ba103090313937b5b2b91760611b604082015260600190565b60208082526017908201527f73656e646572206e6f74206120637573746f6469616e2e000000000000000000604082015260600190565b8881526001600160a01b03881660208201526040810187905261010060608201819052600090612c5483820189612a64565b90508281036080840152612c688188612a64565b90508560a084015282810360c0840152612c828186612a64565b9150508260e08301529998505050505050505050565b600086825260a06020830152612cb160a0830187612a64565b8281036040840152612cc38187612a64565b60608401959095525050608001529392505050565b600085825260806020830152612cf16080830186612a64565b6040830194909452506060015292915050565b60005b83811015612d1f578181015183820152602001612d07565b83811115612d2e576000848401525b50505050565b600181811c90821680612d4857607f821691505b60208210811415612d6957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612d9a57600080fd5b5056fea2646970667358221220a47959ccc5c8f4f69c3c1547d89e5503f7e753a707508575440b94f688dc06c264736f6c634300080300338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000000000000000000000791b41c19caba9372240d194ed11ab224e0a6047",
}

// WxchABI is the input ABI used to generate the binding from.
// Deprecated: Use WxchMetaData.ABI instead.
var WxchABI = WxchMetaData.ABI

// WxchBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WxchMetaData.Bin instead.
var WxchBin = WxchMetaData.Bin

// DeployWxch deploys a new Ethereum contract, binding an instance of Wxch to it.
func DeployWxch(auth *bind.TransactOpts, backend bind.ContractBackend, _controller common.Address) (common.Address, *types.Transaction, *Wxch, error) {
	parsed, err := WxchMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WxchBin), backend, _controller)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Wxch{WxchCaller: WxchCaller{contract: contract}, WxchTransactor: WxchTransactor{contract: contract}, WxchFilterer: WxchFilterer{contract: contract}}, nil
}

// Wxch is an auto generated Go binding around an Ethereum contract.
type Wxch struct {
	WxchCaller     // Read-only binding to the contract
	WxchTransactor // Write-only binding to the contract
	WxchFilterer   // Log filterer for contract events
}

// WxchCaller is an auto generated read-only Go binding around an Ethereum contract.
type WxchCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WxchTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WxchTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WxchFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WxchFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WxchSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WxchSession struct {
	Contract     *Wxch             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WxchCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WxchCallerSession struct {
	Contract *WxchCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// WxchTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WxchTransactorSession struct {
	Contract     *WxchTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WxchRaw is an auto generated low-level Go binding around an Ethereum contract.
type WxchRaw struct {
	Contract *Wxch // Generic contract binding to access the raw methods on
}

// WxchCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WxchCallerRaw struct {
	Contract *WxchCaller // Generic read-only contract binding to access the raw methods on
}

// WxchTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WxchTransactorRaw struct {
	Contract *WxchTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWxch creates a new instance of Wxch, bound to a specific deployed contract.
func NewWxch(address common.Address, backend bind.ContractBackend) (*Wxch, error) {
	contract, err := bindWxch(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Wxch{WxchCaller: WxchCaller{contract: contract}, WxchTransactor: WxchTransactor{contract: contract}, WxchFilterer: WxchFilterer{contract: contract}}, nil
}

// NewWxchCaller creates a new read-only instance of Wxch, bound to a specific deployed contract.
func NewWxchCaller(address common.Address, caller bind.ContractCaller) (*WxchCaller, error) {
	contract, err := bindWxch(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WxchCaller{contract: contract}, nil
}

// NewWxchTransactor creates a new write-only instance of Wxch, bound to a specific deployed contract.
func NewWxchTransactor(address common.Address, transactor bind.ContractTransactor) (*WxchTransactor, error) {
	contract, err := bindWxch(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WxchTransactor{contract: contract}, nil
}

// NewWxchFilterer creates a new log filterer instance of Wxch, bound to a specific deployed contract.
func NewWxchFilterer(address common.Address, filterer bind.ContractFilterer) (*WxchFilterer, error) {
	contract, err := bindWxch(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WxchFilterer{contract: contract}, nil
}

// bindWxch binds a generic wrapper to an already deployed contract.
func bindWxch(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WxchABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wxch *WxchRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wxch.Contract.WxchCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wxch *WxchRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wxch.Contract.WxchTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wxch *WxchRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wxch.Contract.WxchTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wxch *WxchCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wxch.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wxch *WxchTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wxch.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wxch *WxchTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wxch.Contract.contract.Transact(opts, method, params...)
}

// BrokerDepositAddress is a free data retrieval call binding the contract method 0x5c9adea7.
//
// Solidity: function brokerDepositAddress(address ) view returns(string)
func (_Wxch *WxchCaller) BrokerDepositAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "brokerDepositAddress", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BrokerDepositAddress is a free data retrieval call binding the contract method 0x5c9adea7.
//
// Solidity: function brokerDepositAddress(address ) view returns(string)
func (_Wxch *WxchSession) BrokerDepositAddress(arg0 common.Address) (string, error) {
	return _Wxch.Contract.BrokerDepositAddress(&_Wxch.CallOpts, arg0)
}

// BrokerDepositAddress is a free data retrieval call binding the contract method 0x5c9adea7.
//
// Solidity: function brokerDepositAddress(address ) view returns(string)
func (_Wxch *WxchCallerSession) BrokerDepositAddress(arg0 common.Address) (string, error) {
	return _Wxch.Contract.BrokerDepositAddress(&_Wxch.CallOpts, arg0)
}

// BurnRequestNonce is a free data retrieval call binding the contract method 0xc72551be.
//
// Solidity: function burnRequestNonce(bytes32 ) view returns(uint256)
func (_Wxch *WxchCaller) BurnRequestNonce(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "burnRequestNonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BurnRequestNonce is a free data retrieval call binding the contract method 0xc72551be.
//
// Solidity: function burnRequestNonce(bytes32 ) view returns(uint256)
func (_Wxch *WxchSession) BurnRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Wxch.Contract.BurnRequestNonce(&_Wxch.CallOpts, arg0)
}

// BurnRequestNonce is a free data retrieval call binding the contract method 0xc72551be.
//
// Solidity: function burnRequestNonce(bytes32 ) view returns(uint256)
func (_Wxch *WxchCallerSession) BurnRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Wxch.Contract.BurnRequestNonce(&_Wxch.CallOpts, arg0)
}

// BurnRequests is a free data retrieval call binding the contract method 0x6406c10c.
//
// Solidity: function burnRequests(uint256 ) view returns(address requester, uint256 amount, string depositAddress, string txid, uint256 nonce, uint256 timestamp, uint8 status)
func (_Wxch *WxchCaller) BurnRequests(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Nonce          *big.Int
	Timestamp      *big.Int
	Status         uint8
}, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "burnRequests", arg0)

	outstruct := new(struct {
		Requester      common.Address
		Amount         *big.Int
		DepositAddress string
		Txid           string
		Nonce          *big.Int
		Timestamp      *big.Int
		Status         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Requester = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.DepositAddress = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Txid = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Nonce = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// BurnRequests is a free data retrieval call binding the contract method 0x6406c10c.
//
// Solidity: function burnRequests(uint256 ) view returns(address requester, uint256 amount, string depositAddress, string txid, uint256 nonce, uint256 timestamp, uint8 status)
func (_Wxch *WxchSession) BurnRequests(arg0 *big.Int) (struct {
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Nonce          *big.Int
	Timestamp      *big.Int
	Status         uint8
}, error) {
	return _Wxch.Contract.BurnRequests(&_Wxch.CallOpts, arg0)
}

// BurnRequests is a free data retrieval call binding the contract method 0x6406c10c.
//
// Solidity: function burnRequests(uint256 ) view returns(address requester, uint256 amount, string depositAddress, string txid, uint256 nonce, uint256 timestamp, uint8 status)
func (_Wxch *WxchCallerSession) BurnRequests(arg0 *big.Int) (struct {
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Nonce          *big.Int
	Timestamp      *big.Int
	Status         uint8
}, error) {
	return _Wxch.Contract.BurnRequests(&_Wxch.CallOpts, arg0)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() view returns(address)
func (_Wxch *WxchCaller) Controller(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "controller")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() view returns(address)
func (_Wxch *WxchSession) Controller() (common.Address, error) {
	return _Wxch.Contract.Controller(&_Wxch.CallOpts)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() view returns(address)
func (_Wxch *WxchCallerSession) Controller() (common.Address, error) {
	return _Wxch.Contract.Controller(&_Wxch.CallOpts)
}

// CustodianDepositAddress is a free data retrieval call binding the contract method 0x14990ace.
//
// Solidity: function custodianDepositAddress(address ) view returns(string)
func (_Wxch *WxchCaller) CustodianDepositAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "custodianDepositAddress", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CustodianDepositAddress is a free data retrieval call binding the contract method 0x14990ace.
//
// Solidity: function custodianDepositAddress(address ) view returns(string)
func (_Wxch *WxchSession) CustodianDepositAddress(arg0 common.Address) (string, error) {
	return _Wxch.Contract.CustodianDepositAddress(&_Wxch.CallOpts, arg0)
}

// CustodianDepositAddress is a free data retrieval call binding the contract method 0x14990ace.
//
// Solidity: function custodianDepositAddress(address ) view returns(string)
func (_Wxch *WxchCallerSession) CustodianDepositAddress(arg0 common.Address) (string, error) {
	return _Wxch.Contract.CustodianDepositAddress(&_Wxch.CallOpts, arg0)
}

// GetBurnRequest is a free data retrieval call binding the contract method 0xe21c40c0.
//
// Solidity: function getBurnRequest(uint256 nonce) view returns(uint256 requestNonce, address requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, string status, bytes32 requestHash)
func (_Wxch *WxchCaller) GetBurnRequest(opts *bind.CallOpts, nonce *big.Int) (struct {
	RequestNonce   *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	Status         string
	RequestHash    [32]byte
}, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "getBurnRequest", nonce)

	outstruct := new(struct {
		RequestNonce   *big.Int
		Requester      common.Address
		Amount         *big.Int
		DepositAddress string
		Txid           string
		Timestamp      *big.Int
		Status         string
		RequestHash    [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RequestNonce = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Requester = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.DepositAddress = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Txid = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Timestamp = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[6], new(string)).(*string)
	outstruct.RequestHash = *abi.ConvertType(out[7], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// GetBurnRequest is a free data retrieval call binding the contract method 0xe21c40c0.
//
// Solidity: function getBurnRequest(uint256 nonce) view returns(uint256 requestNonce, address requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, string status, bytes32 requestHash)
func (_Wxch *WxchSession) GetBurnRequest(nonce *big.Int) (struct {
	RequestNonce   *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	Status         string
	RequestHash    [32]byte
}, error) {
	return _Wxch.Contract.GetBurnRequest(&_Wxch.CallOpts, nonce)
}

// GetBurnRequest is a free data retrieval call binding the contract method 0xe21c40c0.
//
// Solidity: function getBurnRequest(uint256 nonce) view returns(uint256 requestNonce, address requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, string status, bytes32 requestHash)
func (_Wxch *WxchCallerSession) GetBurnRequest(nonce *big.Int) (struct {
	RequestNonce   *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	Status         string
	RequestHash    [32]byte
}, error) {
	return _Wxch.Contract.GetBurnRequest(&_Wxch.CallOpts, nonce)
}

// GetBurnRequestsLength is a free data retrieval call binding the contract method 0x72f69a72.
//
// Solidity: function getBurnRequestsLength() view returns(uint256 length)
func (_Wxch *WxchCaller) GetBurnRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "getBurnRequestsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBurnRequestsLength is a free data retrieval call binding the contract method 0x72f69a72.
//
// Solidity: function getBurnRequestsLength() view returns(uint256 length)
func (_Wxch *WxchSession) GetBurnRequestsLength() (*big.Int, error) {
	return _Wxch.Contract.GetBurnRequestsLength(&_Wxch.CallOpts)
}

// GetBurnRequestsLength is a free data retrieval call binding the contract method 0x72f69a72.
//
// Solidity: function getBurnRequestsLength() view returns(uint256 length)
func (_Wxch *WxchCallerSession) GetBurnRequestsLength() (*big.Int, error) {
	return _Wxch.Contract.GetBurnRequestsLength(&_Wxch.CallOpts)
}

// GetMintRequest is a free data retrieval call binding the contract method 0xb69b22d8.
//
// Solidity: function getMintRequest(uint256 nonce) view returns(uint256 requestNonce, address requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, string status, bytes32 requestHash)
func (_Wxch *WxchCaller) GetMintRequest(opts *bind.CallOpts, nonce *big.Int) (struct {
	RequestNonce   *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	Status         string
	RequestHash    [32]byte
}, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "getMintRequest", nonce)

	outstruct := new(struct {
		RequestNonce   *big.Int
		Requester      common.Address
		Amount         *big.Int
		DepositAddress string
		Txid           string
		Timestamp      *big.Int
		Status         string
		RequestHash    [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RequestNonce = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Requester = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.DepositAddress = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Txid = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Timestamp = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[6], new(string)).(*string)
	outstruct.RequestHash = *abi.ConvertType(out[7], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// GetMintRequest is a free data retrieval call binding the contract method 0xb69b22d8.
//
// Solidity: function getMintRequest(uint256 nonce) view returns(uint256 requestNonce, address requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, string status, bytes32 requestHash)
func (_Wxch *WxchSession) GetMintRequest(nonce *big.Int) (struct {
	RequestNonce   *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	Status         string
	RequestHash    [32]byte
}, error) {
	return _Wxch.Contract.GetMintRequest(&_Wxch.CallOpts, nonce)
}

// GetMintRequest is a free data retrieval call binding the contract method 0xb69b22d8.
//
// Solidity: function getMintRequest(uint256 nonce) view returns(uint256 requestNonce, address requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, string status, bytes32 requestHash)
func (_Wxch *WxchCallerSession) GetMintRequest(nonce *big.Int) (struct {
	RequestNonce   *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	Status         string
	RequestHash    [32]byte
}, error) {
	return _Wxch.Contract.GetMintRequest(&_Wxch.CallOpts, nonce)
}

// GetMintRequestsLength is a free data retrieval call binding the contract method 0x311104f3.
//
// Solidity: function getMintRequestsLength() view returns(uint256 length)
func (_Wxch *WxchCaller) GetMintRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "getMintRequestsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMintRequestsLength is a free data retrieval call binding the contract method 0x311104f3.
//
// Solidity: function getMintRequestsLength() view returns(uint256 length)
func (_Wxch *WxchSession) GetMintRequestsLength() (*big.Int, error) {
	return _Wxch.Contract.GetMintRequestsLength(&_Wxch.CallOpts)
}

// GetMintRequestsLength is a free data retrieval call binding the contract method 0x311104f3.
//
// Solidity: function getMintRequestsLength() view returns(uint256 length)
func (_Wxch *WxchCallerSession) GetMintRequestsLength() (*big.Int, error) {
	return _Wxch.Contract.GetMintRequestsLength(&_Wxch.CallOpts)
}

// MintRequestNonce is a free data retrieval call binding the contract method 0x9ad4b86b.
//
// Solidity: function mintRequestNonce(bytes32 ) view returns(uint256)
func (_Wxch *WxchCaller) MintRequestNonce(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "mintRequestNonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintRequestNonce is a free data retrieval call binding the contract method 0x9ad4b86b.
//
// Solidity: function mintRequestNonce(bytes32 ) view returns(uint256)
func (_Wxch *WxchSession) MintRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Wxch.Contract.MintRequestNonce(&_Wxch.CallOpts, arg0)
}

// MintRequestNonce is a free data retrieval call binding the contract method 0x9ad4b86b.
//
// Solidity: function mintRequestNonce(bytes32 ) view returns(uint256)
func (_Wxch *WxchCallerSession) MintRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Wxch.Contract.MintRequestNonce(&_Wxch.CallOpts, arg0)
}

// MintRequests is a free data retrieval call binding the contract method 0x424e6575.
//
// Solidity: function mintRequests(uint256 ) view returns(address requester, uint256 amount, string depositAddress, string txid, uint256 nonce, uint256 timestamp, uint8 status)
func (_Wxch *WxchCaller) MintRequests(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Nonce          *big.Int
	Timestamp      *big.Int
	Status         uint8
}, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "mintRequests", arg0)

	outstruct := new(struct {
		Requester      common.Address
		Amount         *big.Int
		DepositAddress string
		Txid           string
		Nonce          *big.Int
		Timestamp      *big.Int
		Status         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Requester = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.DepositAddress = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Txid = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Nonce = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// MintRequests is a free data retrieval call binding the contract method 0x424e6575.
//
// Solidity: function mintRequests(uint256 ) view returns(address requester, uint256 amount, string depositAddress, string txid, uint256 nonce, uint256 timestamp, uint8 status)
func (_Wxch *WxchSession) MintRequests(arg0 *big.Int) (struct {
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Nonce          *big.Int
	Timestamp      *big.Int
	Status         uint8
}, error) {
	return _Wxch.Contract.MintRequests(&_Wxch.CallOpts, arg0)
}

// MintRequests is a free data retrieval call binding the contract method 0x424e6575.
//
// Solidity: function mintRequests(uint256 ) view returns(address requester, uint256 amount, string depositAddress, string txid, uint256 nonce, uint256 timestamp, uint8 status)
func (_Wxch *WxchCallerSession) MintRequests(arg0 *big.Int) (struct {
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Nonce          *big.Int
	Timestamp      *big.Int
	Status         uint8
}, error) {
	return _Wxch.Contract.MintRequests(&_Wxch.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wxch *WxchCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Wxch.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wxch *WxchSession) Owner() (common.Address, error) {
	return _Wxch.Contract.Owner(&_Wxch.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wxch *WxchCallerSession) Owner() (common.Address, error) {
	return _Wxch.Contract.Owner(&_Wxch.CallOpts)
}

// AddMintRequest is a paid mutator transaction binding the contract method 0x8e24a764.
//
// Solidity: function addMintRequest(uint256 amount, string txid, string depositAddress) returns(bool)
func (_Wxch *WxchTransactor) AddMintRequest(opts *bind.TransactOpts, amount *big.Int, txid string, depositAddress string) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "addMintRequest", amount, txid, depositAddress)
}

// AddMintRequest is a paid mutator transaction binding the contract method 0x8e24a764.
//
// Solidity: function addMintRequest(uint256 amount, string txid, string depositAddress) returns(bool)
func (_Wxch *WxchSession) AddMintRequest(amount *big.Int, txid string, depositAddress string) (*types.Transaction, error) {
	return _Wxch.Contract.AddMintRequest(&_Wxch.TransactOpts, amount, txid, depositAddress)
}

// AddMintRequest is a paid mutator transaction binding the contract method 0x8e24a764.
//
// Solidity: function addMintRequest(uint256 amount, string txid, string depositAddress) returns(bool)
func (_Wxch *WxchTransactorSession) AddMintRequest(amount *big.Int, txid string, depositAddress string) (*types.Transaction, error) {
	return _Wxch.Contract.AddMintRequest(&_Wxch.TransactOpts, amount, txid, depositAddress)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns(bool)
func (_Wxch *WxchTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns(bool)
func (_Wxch *WxchSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Wxch.Contract.Burn(&_Wxch.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns(bool)
func (_Wxch *WxchTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Wxch.Contract.Burn(&_Wxch.TransactOpts, amount)
}

// CancelMintRequest is a paid mutator transaction binding the contract method 0xc06e2d24.
//
// Solidity: function cancelMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchTransactor) CancelMintRequest(opts *bind.TransactOpts, requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "cancelMintRequest", requestHash)
}

// CancelMintRequest is a paid mutator transaction binding the contract method 0xc06e2d24.
//
// Solidity: function cancelMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchSession) CancelMintRequest(requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.Contract.CancelMintRequest(&_Wxch.TransactOpts, requestHash)
}

// CancelMintRequest is a paid mutator transaction binding the contract method 0xc06e2d24.
//
// Solidity: function cancelMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchTransactorSession) CancelMintRequest(requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.Contract.CancelMintRequest(&_Wxch.TransactOpts, requestHash)
}

// ConfirmBurnRequest is a paid mutator transaction binding the contract method 0x9355f0a4.
//
// Solidity: function confirmBurnRequest(bytes32 requestHash, string txid) returns(bool)
func (_Wxch *WxchTransactor) ConfirmBurnRequest(opts *bind.TransactOpts, requestHash [32]byte, txid string) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "confirmBurnRequest", requestHash, txid)
}

// ConfirmBurnRequest is a paid mutator transaction binding the contract method 0x9355f0a4.
//
// Solidity: function confirmBurnRequest(bytes32 requestHash, string txid) returns(bool)
func (_Wxch *WxchSession) ConfirmBurnRequest(requestHash [32]byte, txid string) (*types.Transaction, error) {
	return _Wxch.Contract.ConfirmBurnRequest(&_Wxch.TransactOpts, requestHash, txid)
}

// ConfirmBurnRequest is a paid mutator transaction binding the contract method 0x9355f0a4.
//
// Solidity: function confirmBurnRequest(bytes32 requestHash, string txid) returns(bool)
func (_Wxch *WxchTransactorSession) ConfirmBurnRequest(requestHash [32]byte, txid string) (*types.Transaction, error) {
	return _Wxch.Contract.ConfirmBurnRequest(&_Wxch.TransactOpts, requestHash, txid)
}

// ConfirmMintRequest is a paid mutator transaction binding the contract method 0x2bf90baa.
//
// Solidity: function confirmMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchTransactor) ConfirmMintRequest(opts *bind.TransactOpts, requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "confirmMintRequest", requestHash)
}

// ConfirmMintRequest is a paid mutator transaction binding the contract method 0x2bf90baa.
//
// Solidity: function confirmMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchSession) ConfirmMintRequest(requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.Contract.ConfirmMintRequest(&_Wxch.TransactOpts, requestHash)
}

// ConfirmMintRequest is a paid mutator transaction binding the contract method 0x2bf90baa.
//
// Solidity: function confirmMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchTransactorSession) ConfirmMintRequest(requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.Contract.ConfirmMintRequest(&_Wxch.TransactOpts, requestHash)
}

// RejectMintRequest is a paid mutator transaction binding the contract method 0x861f92a8.
//
// Solidity: function rejectMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchTransactor) RejectMintRequest(opts *bind.TransactOpts, requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "rejectMintRequest", requestHash)
}

// RejectMintRequest is a paid mutator transaction binding the contract method 0x861f92a8.
//
// Solidity: function rejectMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchSession) RejectMintRequest(requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.Contract.RejectMintRequest(&_Wxch.TransactOpts, requestHash)
}

// RejectMintRequest is a paid mutator transaction binding the contract method 0x861f92a8.
//
// Solidity: function rejectMintRequest(bytes32 requestHash) returns(bool)
func (_Wxch *WxchTransactorSession) RejectMintRequest(requestHash [32]byte) (*types.Transaction, error) {
	return _Wxch.Contract.RejectMintRequest(&_Wxch.TransactOpts, requestHash)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wxch *WxchTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wxch *WxchSession) RenounceOwnership() (*types.Transaction, error) {
	return _Wxch.Contract.RenounceOwnership(&_Wxch.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wxch *WxchTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Wxch.Contract.RenounceOwnership(&_Wxch.TransactOpts)
}

// SetBrokerDepositAddress is a paid mutator transaction binding the contract method 0xc632e4bc.
//
// Solidity: function setBrokerDepositAddress(string depositAddress) returns(bool)
func (_Wxch *WxchTransactor) SetBrokerDepositAddress(opts *bind.TransactOpts, depositAddress string) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "setBrokerDepositAddress", depositAddress)
}

// SetBrokerDepositAddress is a paid mutator transaction binding the contract method 0xc632e4bc.
//
// Solidity: function setBrokerDepositAddress(string depositAddress) returns(bool)
func (_Wxch *WxchSession) SetBrokerDepositAddress(depositAddress string) (*types.Transaction, error) {
	return _Wxch.Contract.SetBrokerDepositAddress(&_Wxch.TransactOpts, depositAddress)
}

// SetBrokerDepositAddress is a paid mutator transaction binding the contract method 0xc632e4bc.
//
// Solidity: function setBrokerDepositAddress(string depositAddress) returns(bool)
func (_Wxch *WxchTransactorSession) SetBrokerDepositAddress(depositAddress string) (*types.Transaction, error) {
	return _Wxch.Contract.SetBrokerDepositAddress(&_Wxch.TransactOpts, depositAddress)
}

// SetCustodianDepositAddress is a paid mutator transaction binding the contract method 0x73e6b0b8.
//
// Solidity: function setCustodianDepositAddress(address broker, string depositAddress) returns(bool)
func (_Wxch *WxchTransactor) SetCustodianDepositAddress(opts *bind.TransactOpts, broker common.Address, depositAddress string) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "setCustodianDepositAddress", broker, depositAddress)
}

// SetCustodianDepositAddress is a paid mutator transaction binding the contract method 0x73e6b0b8.
//
// Solidity: function setCustodianDepositAddress(address broker, string depositAddress) returns(bool)
func (_Wxch *WxchSession) SetCustodianDepositAddress(broker common.Address, depositAddress string) (*types.Transaction, error) {
	return _Wxch.Contract.SetCustodianDepositAddress(&_Wxch.TransactOpts, broker, depositAddress)
}

// SetCustodianDepositAddress is a paid mutator transaction binding the contract method 0x73e6b0b8.
//
// Solidity: function setCustodianDepositAddress(address broker, string depositAddress) returns(bool)
func (_Wxch *WxchTransactorSession) SetCustodianDepositAddress(broker common.Address, depositAddress string) (*types.Transaction, error) {
	return _Wxch.Contract.SetCustodianDepositAddress(&_Wxch.TransactOpts, broker, depositAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wxch *WxchTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Wxch.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wxch *WxchSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Wxch.Contract.TransferOwnership(&_Wxch.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wxch *WxchTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Wxch.Contract.TransferOwnership(&_Wxch.TransactOpts, newOwner)
}

// WxchBrokerDepositAddressSetIterator is returned from FilterBrokerDepositAddressSet and is used to iterate over the raw logs and unpacked data for BrokerDepositAddressSet events raised by the Wxch contract.
type WxchBrokerDepositAddressSetIterator struct {
	Event *WxchBrokerDepositAddressSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchBrokerDepositAddressSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchBrokerDepositAddressSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchBrokerDepositAddressSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchBrokerDepositAddressSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchBrokerDepositAddressSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchBrokerDepositAddressSet represents a BrokerDepositAddressSet event raised by the Wxch contract.
type WxchBrokerDepositAddressSet struct {
	Broker         common.Address
	DepositAddress string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBrokerDepositAddressSet is a free log retrieval operation binding the contract event 0xd4bf22af0d62666e8b980f7e5a35e41f5b3fe0fe17917ec781288c9da27ca21f.
//
// Solidity: event BrokerDepositAddressSet(address indexed broker, string depositAddress)
func (_Wxch *WxchFilterer) FilterBrokerDepositAddressSet(opts *bind.FilterOpts, broker []common.Address) (*WxchBrokerDepositAddressSetIterator, error) {

	var brokerRule []interface{}
	for _, brokerItem := range broker {
		brokerRule = append(brokerRule, brokerItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "BrokerDepositAddressSet", brokerRule)
	if err != nil {
		return nil, err
	}
	return &WxchBrokerDepositAddressSetIterator{contract: _Wxch.contract, event: "BrokerDepositAddressSet", logs: logs, sub: sub}, nil
}

// WatchBrokerDepositAddressSet is a free log subscription operation binding the contract event 0xd4bf22af0d62666e8b980f7e5a35e41f5b3fe0fe17917ec781288c9da27ca21f.
//
// Solidity: event BrokerDepositAddressSet(address indexed broker, string depositAddress)
func (_Wxch *WxchFilterer) WatchBrokerDepositAddressSet(opts *bind.WatchOpts, sink chan<- *WxchBrokerDepositAddressSet, broker []common.Address) (event.Subscription, error) {

	var brokerRule []interface{}
	for _, brokerItem := range broker {
		brokerRule = append(brokerRule, brokerItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "BrokerDepositAddressSet", brokerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchBrokerDepositAddressSet)
				if err := _Wxch.contract.UnpackLog(event, "BrokerDepositAddressSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBrokerDepositAddressSet is a log parse operation binding the contract event 0xd4bf22af0d62666e8b980f7e5a35e41f5b3fe0fe17917ec781288c9da27ca21f.
//
// Solidity: event BrokerDepositAddressSet(address indexed broker, string depositAddress)
func (_Wxch *WxchFilterer) ParseBrokerDepositAddressSet(log types.Log) (*WxchBrokerDepositAddressSet, error) {
	event := new(WxchBrokerDepositAddressSet)
	if err := _Wxch.contract.UnpackLog(event, "BrokerDepositAddressSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchBurnConfirmedIterator is returned from FilterBurnConfirmed and is used to iterate over the raw logs and unpacked data for BurnConfirmed events raised by the Wxch contract.
type WxchBurnConfirmedIterator struct {
	Event *WxchBurnConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchBurnConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchBurnConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchBurnConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchBurnConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchBurnConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchBurnConfirmed represents a BurnConfirmed event raised by the Wxch contract.
type WxchBurnConfirmed struct {
	Nonce            *big.Int
	Requester        common.Address
	Amount           *big.Int
	DepositAddress   string
	Txid             string
	Timestamp        *big.Int
	InputRequestHash [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterBurnConfirmed is a free log retrieval operation binding the contract event 0x1949e77206780c38f7c6487c926f8a51280fcdbf63397a01a3428dbfccd2b09f.
//
// Solidity: event BurnConfirmed(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 inputRequestHash)
func (_Wxch *WxchFilterer) FilterBurnConfirmed(opts *bind.FilterOpts, nonce []*big.Int, requester []common.Address) (*WxchBurnConfirmedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "BurnConfirmed", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &WxchBurnConfirmedIterator{contract: _Wxch.contract, event: "BurnConfirmed", logs: logs, sub: sub}, nil
}

// WatchBurnConfirmed is a free log subscription operation binding the contract event 0x1949e77206780c38f7c6487c926f8a51280fcdbf63397a01a3428dbfccd2b09f.
//
// Solidity: event BurnConfirmed(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 inputRequestHash)
func (_Wxch *WxchFilterer) WatchBurnConfirmed(opts *bind.WatchOpts, sink chan<- *WxchBurnConfirmed, nonce []*big.Int, requester []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "BurnConfirmed", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchBurnConfirmed)
				if err := _Wxch.contract.UnpackLog(event, "BurnConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnConfirmed is a log parse operation binding the contract event 0x1949e77206780c38f7c6487c926f8a51280fcdbf63397a01a3428dbfccd2b09f.
//
// Solidity: event BurnConfirmed(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 inputRequestHash)
func (_Wxch *WxchFilterer) ParseBurnConfirmed(log types.Log) (*WxchBurnConfirmed, error) {
	event := new(WxchBurnConfirmed)
	if err := _Wxch.contract.UnpackLog(event, "BurnConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchBurnedIterator is returned from FilterBurned and is used to iterate over the raw logs and unpacked data for Burned events raised by the Wxch contract.
type WxchBurnedIterator struct {
	Event *WxchBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchBurned represents a Burned event raised by the Wxch contract.
type WxchBurned struct {
	Nonce          *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Timestamp      *big.Int
	RequestHash    [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBurned is a free log retrieval operation binding the contract event 0x865e64c3fa22a0daee479fc02875d3e97d581930b9679232344d4d5dcce6a7b2.
//
// Solidity: event Burned(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) FilterBurned(opts *bind.FilterOpts, nonce []*big.Int, requester []common.Address) (*WxchBurnedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "Burned", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &WxchBurnedIterator{contract: _Wxch.contract, event: "Burned", logs: logs, sub: sub}, nil
}

// WatchBurned is a free log subscription operation binding the contract event 0x865e64c3fa22a0daee479fc02875d3e97d581930b9679232344d4d5dcce6a7b2.
//
// Solidity: event Burned(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) WatchBurned(opts *bind.WatchOpts, sink chan<- *WxchBurned, nonce []*big.Int, requester []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "Burned", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchBurned)
				if err := _Wxch.contract.UnpackLog(event, "Burned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurned is a log parse operation binding the contract event 0x865e64c3fa22a0daee479fc02875d3e97d581930b9679232344d4d5dcce6a7b2.
//
// Solidity: event Burned(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) ParseBurned(log types.Log) (*WxchBurned, error) {
	event := new(WxchBurned)
	if err := _Wxch.contract.UnpackLog(event, "Burned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchCustodianDepositAddressSetIterator is returned from FilterCustodianDepositAddressSet and is used to iterate over the raw logs and unpacked data for CustodianDepositAddressSet events raised by the Wxch contract.
type WxchCustodianDepositAddressSetIterator struct {
	Event *WxchCustodianDepositAddressSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchCustodianDepositAddressSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchCustodianDepositAddressSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchCustodianDepositAddressSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchCustodianDepositAddressSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchCustodianDepositAddressSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchCustodianDepositAddressSet represents a CustodianDepositAddressSet event raised by the Wxch contract.
type WxchCustodianDepositAddressSet struct {
	Broker         common.Address
	Sender         common.Address
	DepositAddress string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCustodianDepositAddressSet is a free log retrieval operation binding the contract event 0x889518f7687592efeb6e775822956ccb4e2a41cfb5bab0438d634523ccf6336d.
//
// Solidity: event CustodianDepositAddressSet(address indexed broker, address indexed sender, string depositAddress)
func (_Wxch *WxchFilterer) FilterCustodianDepositAddressSet(opts *bind.FilterOpts, broker []common.Address, sender []common.Address) (*WxchCustodianDepositAddressSetIterator, error) {

	var brokerRule []interface{}
	for _, brokerItem := range broker {
		brokerRule = append(brokerRule, brokerItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "CustodianDepositAddressSet", brokerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &WxchCustodianDepositAddressSetIterator{contract: _Wxch.contract, event: "CustodianDepositAddressSet", logs: logs, sub: sub}, nil
}

// WatchCustodianDepositAddressSet is a free log subscription operation binding the contract event 0x889518f7687592efeb6e775822956ccb4e2a41cfb5bab0438d634523ccf6336d.
//
// Solidity: event CustodianDepositAddressSet(address indexed broker, address indexed sender, string depositAddress)
func (_Wxch *WxchFilterer) WatchCustodianDepositAddressSet(opts *bind.WatchOpts, sink chan<- *WxchCustodianDepositAddressSet, broker []common.Address, sender []common.Address) (event.Subscription, error) {

	var brokerRule []interface{}
	for _, brokerItem := range broker {
		brokerRule = append(brokerRule, brokerItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "CustodianDepositAddressSet", brokerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchCustodianDepositAddressSet)
				if err := _Wxch.contract.UnpackLog(event, "CustodianDepositAddressSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodianDepositAddressSet is a log parse operation binding the contract event 0x889518f7687592efeb6e775822956ccb4e2a41cfb5bab0438d634523ccf6336d.
//
// Solidity: event CustodianDepositAddressSet(address indexed broker, address indexed sender, string depositAddress)
func (_Wxch *WxchFilterer) ParseCustodianDepositAddressSet(log types.Log) (*WxchCustodianDepositAddressSet, error) {
	event := new(WxchCustodianDepositAddressSet)
	if err := _Wxch.contract.UnpackLog(event, "CustodianDepositAddressSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchMintConfirmedIterator is returned from FilterMintConfirmed and is used to iterate over the raw logs and unpacked data for MintConfirmed events raised by the Wxch contract.
type WxchMintConfirmedIterator struct {
	Event *WxchMintConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchMintConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchMintConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchMintConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchMintConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchMintConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchMintConfirmed represents a MintConfirmed event raised by the Wxch contract.
type WxchMintConfirmed struct {
	Nonce          *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	RequestHash    [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMintConfirmed is a free log retrieval operation binding the contract event 0x051f4ba27061b0e6dc829669a7baa8bba9cf7f6cd2f95e1f0bdd9c22126d8b21.
//
// Solidity: event MintConfirmed(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) FilterMintConfirmed(opts *bind.FilterOpts, nonce []*big.Int, requester []common.Address) (*WxchMintConfirmedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "MintConfirmed", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &WxchMintConfirmedIterator{contract: _Wxch.contract, event: "MintConfirmed", logs: logs, sub: sub}, nil
}

// WatchMintConfirmed is a free log subscription operation binding the contract event 0x051f4ba27061b0e6dc829669a7baa8bba9cf7f6cd2f95e1f0bdd9c22126d8b21.
//
// Solidity: event MintConfirmed(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) WatchMintConfirmed(opts *bind.WatchOpts, sink chan<- *WxchMintConfirmed, nonce []*big.Int, requester []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "MintConfirmed", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchMintConfirmed)
				if err := _Wxch.contract.UnpackLog(event, "MintConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintConfirmed is a log parse operation binding the contract event 0x051f4ba27061b0e6dc829669a7baa8bba9cf7f6cd2f95e1f0bdd9c22126d8b21.
//
// Solidity: event MintConfirmed(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) ParseMintConfirmed(log types.Log) (*WxchMintConfirmed, error) {
	event := new(WxchMintConfirmed)
	if err := _Wxch.contract.UnpackLog(event, "MintConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchMintRejectedIterator is returned from FilterMintRejected and is used to iterate over the raw logs and unpacked data for MintRejected events raised by the Wxch contract.
type WxchMintRejectedIterator struct {
	Event *WxchMintRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchMintRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchMintRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchMintRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchMintRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchMintRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchMintRejected represents a MintRejected event raised by the Wxch contract.
type WxchMintRejected struct {
	Nonce          *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	RequestHash    [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMintRejected is a free log retrieval operation binding the contract event 0xdadc06f5b98131083e96b856c044184efd23ae2e797a876fd80aa5dae4f72455.
//
// Solidity: event MintRejected(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) FilterMintRejected(opts *bind.FilterOpts, nonce []*big.Int, requester []common.Address) (*WxchMintRejectedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "MintRejected", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &WxchMintRejectedIterator{contract: _Wxch.contract, event: "MintRejected", logs: logs, sub: sub}, nil
}

// WatchMintRejected is a free log subscription operation binding the contract event 0xdadc06f5b98131083e96b856c044184efd23ae2e797a876fd80aa5dae4f72455.
//
// Solidity: event MintRejected(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) WatchMintRejected(opts *bind.WatchOpts, sink chan<- *WxchMintRejected, nonce []*big.Int, requester []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "MintRejected", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchMintRejected)
				if err := _Wxch.contract.UnpackLog(event, "MintRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintRejected is a log parse operation binding the contract event 0xdadc06f5b98131083e96b856c044184efd23ae2e797a876fd80aa5dae4f72455.
//
// Solidity: event MintRejected(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) ParseMintRejected(log types.Log) (*WxchMintRejected, error) {
	event := new(WxchMintRejected)
	if err := _Wxch.contract.UnpackLog(event, "MintRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchMintRequestAddIterator is returned from FilterMintRequestAdd and is used to iterate over the raw logs and unpacked data for MintRequestAdd events raised by the Wxch contract.
type WxchMintRequestAddIterator struct {
	Event *WxchMintRequestAdd // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchMintRequestAddIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchMintRequestAdd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchMintRequestAdd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchMintRequestAddIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchMintRequestAddIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchMintRequestAdd represents a MintRequestAdd event raised by the Wxch contract.
type WxchMintRequestAdd struct {
	Nonce          *big.Int
	Requester      common.Address
	Amount         *big.Int
	DepositAddress string
	Txid           string
	Timestamp      *big.Int
	RequestHash    [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMintRequestAdd is a free log retrieval operation binding the contract event 0x09e00024b3e14e42d4e78c05bf370a34c2e4ce4027dad38abafdb1bf49da432f.
//
// Solidity: event MintRequestAdd(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) FilterMintRequestAdd(opts *bind.FilterOpts, nonce []*big.Int, requester []common.Address) (*WxchMintRequestAddIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "MintRequestAdd", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &WxchMintRequestAddIterator{contract: _Wxch.contract, event: "MintRequestAdd", logs: logs, sub: sub}, nil
}

// WatchMintRequestAdd is a free log subscription operation binding the contract event 0x09e00024b3e14e42d4e78c05bf370a34c2e4ce4027dad38abafdb1bf49da432f.
//
// Solidity: event MintRequestAdd(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) WatchMintRequestAdd(opts *bind.WatchOpts, sink chan<- *WxchMintRequestAdd, nonce []*big.Int, requester []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "MintRequestAdd", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchMintRequestAdd)
				if err := _Wxch.contract.UnpackLog(event, "MintRequestAdd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintRequestAdd is a log parse operation binding the contract event 0x09e00024b3e14e42d4e78c05bf370a34c2e4ce4027dad38abafdb1bf49da432f.
//
// Solidity: event MintRequestAdd(uint256 indexed nonce, address indexed requester, uint256 amount, string depositAddress, string txid, uint256 timestamp, bytes32 requestHash)
func (_Wxch *WxchFilterer) ParseMintRequestAdd(log types.Log) (*WxchMintRequestAdd, error) {
	event := new(WxchMintRequestAdd)
	if err := _Wxch.contract.UnpackLog(event, "MintRequestAdd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchMintRequestCancelIterator is returned from FilterMintRequestCancel and is used to iterate over the raw logs and unpacked data for MintRequestCancel events raised by the Wxch contract.
type WxchMintRequestCancelIterator struct {
	Event *WxchMintRequestCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchMintRequestCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchMintRequestCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchMintRequestCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchMintRequestCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchMintRequestCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchMintRequestCancel represents a MintRequestCancel event raised by the Wxch contract.
type WxchMintRequestCancel struct {
	Nonce       *big.Int
	Requester   common.Address
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMintRequestCancel is a free log retrieval operation binding the contract event 0xb419f275eebfa354bbab2709955ee0c0e25ca95fae50a8e3672c5e3d9c931f58.
//
// Solidity: event MintRequestCancel(uint256 indexed nonce, address indexed requester, bytes32 requestHash)
func (_Wxch *WxchFilterer) FilterMintRequestCancel(opts *bind.FilterOpts, nonce []*big.Int, requester []common.Address) (*WxchMintRequestCancelIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "MintRequestCancel", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &WxchMintRequestCancelIterator{contract: _Wxch.contract, event: "MintRequestCancel", logs: logs, sub: sub}, nil
}

// WatchMintRequestCancel is a free log subscription operation binding the contract event 0xb419f275eebfa354bbab2709955ee0c0e25ca95fae50a8e3672c5e3d9c931f58.
//
// Solidity: event MintRequestCancel(uint256 indexed nonce, address indexed requester, bytes32 requestHash)
func (_Wxch *WxchFilterer) WatchMintRequestCancel(opts *bind.WatchOpts, sink chan<- *WxchMintRequestCancel, nonce []*big.Int, requester []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "MintRequestCancel", nonceRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchMintRequestCancel)
				if err := _Wxch.contract.UnpackLog(event, "MintRequestCancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintRequestCancel is a log parse operation binding the contract event 0xb419f275eebfa354bbab2709955ee0c0e25ca95fae50a8e3672c5e3d9c931f58.
//
// Solidity: event MintRequestCancel(uint256 indexed nonce, address indexed requester, bytes32 requestHash)
func (_Wxch *WxchFilterer) ParseMintRequestCancel(log types.Log) (*WxchMintRequestCancel, error) {
	event := new(WxchMintRequestCancel)
	if err := _Wxch.contract.UnpackLog(event, "MintRequestCancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WxchOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Wxch contract.
type WxchOwnershipTransferredIterator struct {
	Event *WxchOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WxchOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WxchOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WxchOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WxchOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WxchOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WxchOwnershipTransferred represents a OwnershipTransferred event raised by the Wxch contract.
type WxchOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wxch *WxchFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WxchOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Wxch.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WxchOwnershipTransferredIterator{contract: _Wxch.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wxch *WxchFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WxchOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Wxch.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WxchOwnershipTransferred)
				if err := _Wxch.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wxch *WxchFilterer) ParseOwnershipTransferred(log types.Log) (*WxchOwnershipTransferred, error) {
	event := new(WxchOwnershipTransferred)
	if err := _Wxch.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
